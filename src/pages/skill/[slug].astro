---
import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import Page from '@/layouts/Page.astro';
import Project from '@/components/Project.astro';
import { sortByOrder } from '@/utils/sort';
import Repository from '@/components/Repository.astro';
import Experience from '@/components/Experience.astro';
import Hr from '@/components/Hr.astro';
import SkillName from '@/components/SkillName.astro';

interface Props {
  skill: CollectionEntry<'skill'>;
}

export async function getStaticPaths() {
  const skills = sortByOrder(await getCollection('skill'));
  return skills.map((skill) => ({
    params: { slug: skill.slug },
    props: { skill },
  }));
}

const { skill } = Astro.props;

const content = await getEntry('page', 'skill');
const title = content.data.title.replaceAll('{skill}', skill.data.name);
const description = content.data.description.replaceAll(
  '{skill}',
  skill.data.name,
);
const ogdescription = content.data.ogdescription.replaceAll(
  '{skill}',
  skill.data.name,
);

const projectContent = await getEntry('page', 'projects');
const projects = sortByOrder(
  await getCollection('project', ({ data }) =>
    data.skills.some((x) => x.slug === skill.slug),
  ),
);

const repositoryContent = await getEntry('page', 'repositories');
const repositories = sortByOrder(
  await getCollection('repository', ({ data }) =>
    data.skills.some((x) => x.slug === skill.slug),
  ),
);

const experienceContent = await getEntry('page', 'resume');
const experiences = sortByOrder(
  await getCollection('experience', ({ data }) =>
    data.skills.some((x) => x.slug === skill.slug),
  ),
);
---

<Page
  active="skill"
  title={title}
  description={description}
  ogdescription={ogdescription}
>
  <div class="flex w-full flex-col gap-8">
    <h2 class="flex items-center text-lg font-semibold">
      <SkillName skill={skill} />
    </h2>

    {
      projects.length > 0 && (
        <>
          <div class="flex flex-col gap-5">
            <h3 class="text-md font-semibold">{projectContent.data.title}</h3>
            <div class="flex flex-col gap-3">
              {projects.map((project) => (
                <Project project={project} />
              ))}
            </div>
          </div>
          <Hr />
        </>
      )
    }

    {
      repositories.length > 0 && (
        <>
          <div class="flex flex-col gap-3">
            <h3 class="text-md font-semibold">
              {repositoryContent.data.title}
            </h3>
            <div class="flex flex-col gap-3">
              {repositories.map((repository) => (
                <Repository repository={repository} />
              ))}
            </div>
          </div>
          <Hr />
        </>
      )
    }

    {
      experiences.length > 0 && (
        <div class="flex flex-col gap-3">
          <h3 class="text-md font-semibold">
            {experienceContent.data.experience}
          </h3>
          <div class="flex flex-col gap-3">
            {experiences.map((experience) => (
              <Experience experience={experience} />
            ))}
          </div>
        </div>
      )
    }
  </div>
</Page>
